$(function(){
    homeBanner.init()
    bannerSlider.init()
    //servicesAnimation.init()
});

var bannerSlider = {
    Selectors: {
        slider: '.presentation-slider',
        slides: '.presentation-slider .element',
        sliderControllers: '.change-slide',
        slideDuration: 400,
    },
    init: function() {
        var that = this
        var slider = $(that.Selectors.slider)
        var slides = $(that.Selectors.slides)
        var controllerPrevious = $(that.Selectors.sliderControllers+" .previous")
        var controllerNext = $(that.Selectors.sliderControllers+" .next")
        var slideDuration = that.Selectors.slideDuration
        var actual = 0
        var animationIsStarted = false

        controllerNext.on('click', function() {
            let next = actual + 1
            if(next >= slides.length) next = 0
            if(!animationIsStarted) {
                animationIsStarted = true
                slider.find('#slide_'+actual).animate({
                    'top': '-110%',
                    'display': 'none'
                }, slideDuration, function() {
                    slider.find('#slide_'+next).css('display', 'block').animate({
                        'top': '0',
                    }, slideDuration, function() {
                        animationIsStarted = false
                    })
                });
                actual = next
            }
        })

        controllerPrevious.on('click', function() {
            let next = actual - 1
            if(next < 0) next = slides.length - 1
            if(!animationIsStarted) {
                animationIsStarted = true
                slider.find('#slide_'+actual).animate({
                    'top': '-110%',
                    'display': 'none'
                }, slideDuration, function() {
                    slider.find('#slide_'+next).css('display', 'block').animate({
                        'top': '0',
                    }, slideDuration, function() {
                        animationIsStarted = false
                    })
                });
                actual = next
            }
        })
    },
}

var homeBanner = {
    Selectors: {
        backgroundMap: '.homepage-banner-map',
        banner: '#home-banner-js',
        lines: '#home-banner-js .line',
        bullets: '#home-banner-js .bullet',
        startSide: "bottom-center",
        noiseFilter: "#grainy-filter",
        width: 30,
        numberOfBullets: 20,
        margin: 2,
        marginBetweenBullets: 5,
    },
    init: function() {
        var that = this
        var banner = $(that.Selectors.banner)
        var backgroundMap = $(that.Selectors.backgroundMap)
        var lines = $(that.Selectors.lines)
        var bullets = $(that.Selectors.bullets)
        var animationDuration = banner.data("duration")

        if(backgroundMap.length) {
            var map = this.getRandomMap(that.Selectors.numberOfBullets)
            this.generateBullets(map);
            this.drawBackgroundMap(4000)
            setTimeout(function() {
                $('body').addClass('animation-done');
            }, 2500);
            setTimeout(function() {
                $(window).on('scroll', function() {
                    var deg = 39 - ($(window).scrollTop() / $(window).height()) * (39/2)
                    var translateZ = - 275 - ($(window).scrollTop() / $(window).height()) * 225
                    var translateY = - ($(window).scrollTop() / $(window).height()) * 800
                    deg = (deg < 0) ? 0 : deg
                    //$(that.Selectors.backgroundMap).css("animation", "non").css("transform", "perspective(1125px) translate3d(0,"+translateY+"px,"+translateZ+"px) rotateX("+deg+"deg) scale(1)")
                })
                that.startBulletAnimation()
                setTimeout(function() {
                    that.startLinesAnimation(map)
                }, 200)
            }, 4000)
        }
    },
    noiseAnimation: function() {
        var noiseSvg = $(this)
    },
    getMapping: function() {
        var mapping = []
        for(let i = 0; i < this.Selectors.width; i++) {
            mapping[i] = []
            for(let j = 0; j < this.Selectors.width; j++) {
                mapping[i][j] = []
                mapping[i][j]["value"] = 0
                mapping[i][j]["done"] = 0
                mapping[i][j]["x"] = i
                mapping[i][j]["y"] = j
                mapping[i][j]["id"] = 0
            }
        }
        return mapping
    },
    getRandomMap: function(numberOfPoints = 14) {
        var map = this.getMapping();
        var i = 0;
        var marginBetweenBullets = this.Selectors.marginBetweenBullets
        while(i < numberOfPoints) {
            let x = 1 + Math.floor(Math.random() * this.Selectors.width-1)
            let y = 1 + Math.floor(Math.random() * this.Selectors.width-1)
            if(x >= this.Selectors.margin
                && x <= this.Selectors.width-1-this.Selectors.margin
                && y >= this.Selectors.margin
                && y <= this.Selectors.width-1-this.Selectors.margin
                && map[x][y]["value"] === 0) {

                // Check margins
                let marginRespect = true
                for(var j = 1; j <= marginBetweenBullets; j++) {
                    marginRespect = marginRespect && !this.checkPosSides(map, x, y, j, false)
                }

                if(marginRespect) {
                    map[x][y]["value"] = 1
                    map[x][y]["done"] = 0
                    map[x][y]["id"] = "bullet_"+x+"_"+y
                    i++
                }
            }
        }
        return map;
    },
    generateBullets: function(map) {
        for(var key in map) {
            for (var k in map[key]) {
                for (var v in map[key][k]) {
                    var model = $("<span class=\"bullet\"></span>");
                    if(v === "value" && map[key][k][v] === 1) {
                        var percentWidth = 100 / (this.Selectors.width)
                        var marginLeft = "calc("+ ((parseInt(key))*percentWidth) +"% + ("+percentWidth+"% - 60px) / 2)"
                        var marginTop = "calc("+ ((parseInt(k))*percentWidth) +"% + ("+percentWidth+"% - 60px) / 2)"
                        model.attr('id', 'bullet_'+key+'_'+k)
                        model.css('left', marginLeft).css('top', marginTop)
                        $(this.Selectors.banner).append(model)
                    }
                }
            }
        }
    },
    getStartPoint: function(map) {
        var halfWidth = (this.Selectors.width / 2).toFixed()
        switch (this.Selectors.startSide) {
            case "bottom-left":
                return map[0][this.Selectors.width-1]
            case "bottom-right":
                return map[this.Selectors.width-1][this.Selectors.width-1]
            case "bottom-center":
                return map[halfWidth][this.Selectors.width-1]
            case "top-left":
                return map[0][0]
            case "top-right":
                return map[this.Selectors.width-1][0]
            case "top-center":
                return map[halfWidth][0]
            case "right":
                return map[this.Selectors.width-1][halfWidth]
            case "left":
                return map[0][halfWidth]
            case "center":
            default:
                return map[halfWidth][halfWidth]
        }
    },
    getCloserBullet: function(map, xPos, yPos, done = 0) {
        var find = false
        var radius = 1
        while (!find) {
            var bulletSide = this.checkPosSides(map, xPos, yPos, radius, done)
            if (bulletSide) {
                find = true
                return bulletSide
            }
            radius++
        }
        return find
    },
    checkPosSides: function (map, xPos, yPos, radius, done) {
        var i
        var checkX
        var checkY

        for(i = 0; xPos + i + 1 <= xPos + radius; i++) {
            checkX = xPos + i
            checkY = yPos + radius - i
            if(checkX >= 0 && checkX < this.Selectors.width && checkY >= 0 && checkY < this.Selectors.width) {
                if (map[checkX][checkY]["value"] === 1 && map[checkX][checkY]["done"] === 0) {
                    return map[checkX][checkY];
                }
            }
        }

        for(i = 0; xPos + radius - i > xPos; i++) {
            checkX = xPos + radius - i
            checkY = yPos - i
            if(checkX >= 0 && checkX < this.Selectors.width && checkY >= 0 && checkY < this.Selectors.width) {
                if (map[checkX][checkY]["value"] === 1 && map[checkX][checkY]["done"] === 0) {
                    return map[checkX][checkY];
                }
            }
        }

        for(i = 0; xPos - i > xPos - radius; i++) {
            checkX = xPos - i
            checkY = yPos - radius + i
            if(checkX >= 0 && checkX < this.Selectors.width && checkY >= 0 && checkY < this.Selectors.width) {
                if (map[checkX][checkY]["value"] === 1 && map[checkX][checkY]["done"] === 0) {
                    return map[checkX][checkY];
                }
            }
        }

        for(i = 0; (xPos - radius + 1 + i) <= xPos; i++) {
            checkX = xPos - radius + i
            checkY = yPos + i
            if(checkX >= 0 && checkX < this.Selectors.width && checkY >= 0 && checkY < this.Selectors.width) {
                if (map[checkX][checkY]["value"] === 1 && map[checkX][checkY]["done"] === 0) {
                    return map[checkX][checkY];
                }
            }
        }

        return false;
    }
    ,startLinesAnimation: function(map) {
        var numberDone = 0;
        var first = this.getStartPoint(map)
        map[first["x"]][first["y"]]["done"] = 1
        $("#"+first['id']).css('background-color', 'red')
        var actual = first
        var interval = 250
        var delay = 0

        while(numberDone < this.Selectors.numberOfBullets) {
            var closer = this.getCloserBullet(map, actual["x"], actual["y"])
            if(closer) {
                map = this.appearBullet(map, closer["x"], closer["y"], delay + interval)
                this.drawLine(map, actual["x"], actual["y"], closer["x"], closer["y"], interval, delay)
                numberDone++
                if(actual !== first && numberDone < this.Selectors.numberOfBullets) {
                    closer = this.getCloserBullet(map, actual["x"], actual["y"])
                    if(closer) {
                        map = this.appearBullet(map, closer["x"], closer["y"], delay + interval)
                        this.drawLine(map, actual["x"], actual["y"], closer["x"], closer["y"],interval, delay)
                        numberDone++
                    }
                }
            }

            delay += interval
            actual = closer
        }
    },
    placeDebugBullet: function(x, y, color = "yellow", delay = 0) {
        var model = $("<span class=\"bullet bullet-debug x_"+x+" y_"+y+"\"></span>");
        var banner = $(this.Selectors.banner)
        model.css('left', (x * (100 / (this.Selectors.width - 1))) +"%").css('top', (y * (100 / (this.Selectors.width - 1))) +"%")
        model.css('background-color', color)
        setTimeout(function() {
            banner.append(model)
        }, delay)

    },
    appearBullet: function(map, x, y, delay) {
        map[x][y]["done"] = 1
        setTimeout(function() {
            $("#"+map[x][y]['id']).addClass('active')
        }, delay)
        return map
    },
    drawLine: function(map, x, y, xB, yB, time = 1000, wait = 0) {
        var delay = 0
        var that = this
        var i
        var numberOfLines = ((x > xB) ? x - xB : xB - x) + ((y > yB) ? y - yB : yB - y)
        var delayInterval = time / numberOfLines

        setTimeout(function() {
            // Draw horizontal left to right
            if(x < xB) {
                for (i = x; i <= xB; i++) {
                    that.drawSubLine(i, y, "width-left", (i + 1 > xB || i === x), (i === x) ? "right" : "left", delay, delayInterval)
                    delay += delayInterval
                }
            } else if(x > xB) {
                for (i = x; i >= xB; i--) {
                    that.drawSubLine(i, y, "width-right", (i - 1 < xB || i === x), (i === x) ? "left" : "right", delay, delayInterval)
                    delay += delayInterval
                }
            }

            if(y > yB) {
                // LINE BOTTOM TO TOP
                for (i = y; i >= yB; i--) {
                    that.drawSubLine(xB, i, "height-top", (i - 1 < yB || i === y), (i === y) ? "bottom" : "top", delay, delayInterval)
                    delay += delayInterval
                }
            } else if(y < yB) {
                // LINE TOP TO BOTTOM
                for (i = y; i <= yB; i++) {
                    that.drawSubLine(xB, i, "height-bottom", (i + 1 > yB || i === y), (i === y) ? "top" : "bottom", delay, delayInterval)
                    delay += delayInterval
                }
            }
        }, wait)
    },
    drawSubLine: function(x, y, type, half = false, orientation = null, delay = 0, duration = 100) {

        var model = $("<span class=\"line\"></span>")
        var banner = $(this.Selectors.banner)

        model.css('width', (100 / (this.Selectors.width))+"%").css('height', (100 / (this.Selectors.width))+"%")
        model.css('left', (x * (100 / (this.Selectors.width))) +"%").css('top', (y * (100 / (this.Selectors.width))) +"%")

        if(type === "width-left") {
            orientation = (orientation === null) ? "left" : orientation
            model.css('animation', 'width '+duration+'ms linear forwards')
            model.css('transform-origin', 'left')
            model.addClass("line-width").addClass(orientation)
        } else if(type === "width-right") {
            orientation = (orientation === null) ? "right" : orientation
            model.css('animation', 'width '+duration+'ms linear forwards')
            model.css('transform-origin', 'right')
            model.addClass("line-width").addClass(orientation)
        } else if(type === "height-top") {
            orientation = (orientation === null) ? "top" : orientation
            model.css('transform-origin', (orientation === "top") ? "bottom" : "top")
            model.css('animation', 'height '+duration+'ms linear forwards')
            model.addClass("line-height").addClass(orientation)
        } else {
            orientation = (orientation === null) ? "bottom" : orientation
            model.css('transform-origin', (orientation === "bottom") ? "top" : "bottom")
            model.css('animation', 'height '+duration+'ms linear forwards')
            model.addClass("line-height").addClass(orientation)
        }

        if(half) model.addClass("half")

        setTimeout(function() {
            banner.append(model)
        }, delay)

    },
    drawDebugLines: function() {
        var banner = $(this.Selectors.banner)

        for(var i = 0; i < this.Selectors.width; i++) {
            var model = $("<span class=\"debug-line-height\" id=\"l_"+i+"\"></span>")
            var modelTop = $("<span class=\"debug-line-width\" id=\"l_"+i+"\"></span>")
            var halfUnitWidth = (50 / (this.Selectors.width))
            model.css('left', i * (100 / (this.Selectors.width)) + halfUnitWidth +"%")
            modelTop.css('top', i * (100 / (this.Selectors.width)) + halfUnitWidth +"%")
            banner.append(model)
            banner.append(modelTop)
        }
    },
    drawBackgroundMap: function(duration = 5000) {
        var background = $(this.Selectors.backgroundMap)
        var width = this.Selectors.width
        var unitWidth = 100 / width
        var unitHalfWidth = 50 / width
        var durationUnit = duration / (width * 2)
        var that = this
        var i

        that.startBackgroundPerspectiveAnimation(duration)

        var delay = 0
        for(i = width - 1; i >= 0; i--) {
            let model = $("<span class=\"line-map-height\" id=\"l_"+i+"\"></span>")
            model.css('left', i * (unitWidth / 2) + (unitHalfWidth / 2) +"%")
            setTimeout(function() {
                background.append(model)
            }, delay)
            delay += durationUnit
        }

        delay = 0
        for(i = width; i < (width * 2); i++) {
            let model = $("<span class=\"line-map-height\" id=\"l_"+i+"\"></span>")
            model.css('left', i * (unitWidth / 2) + (unitHalfWidth / 2) +"%")
            setTimeout(function() {
                background.append(model)
            }, delay)
            delay += durationUnit
        }

        delay = 0
        for(i = 0; i < (width * 2); i++) {
            if(i%2) {
                let modelTop = $("<span class=\"line-map-width\" id=\"l_"+i+"\"></span>")
                modelTop.css('top', i * (unitWidth / 2.5) + ((unitWidth / 2.5)) +"%")
                modelTop.css('transform-origin', 'right')
                setTimeout(function() {
                    background.append(modelTop)
                }, delay)
                delay += durationUnit
            }
        }

        delay = 0
        for(i = (width * 2); i >= 0; i--) {
            if(!(i%2)) {
                let modelTop = $("<span class=\"line-map-width\" id=\"l_"+i+"\"></span>")
                modelTop.css('top', i * (unitWidth / 2.5) + ((unitWidth / 2.5)) +"%")
                modelTop.css('transform-origin', 'left')
                setTimeout(function() {
                    background.append(modelTop)
                }, delay)
                delay += durationUnit
            }
        }
    },
    startBackgroundPerspectiveAnimation: function(duration = 2000) {
        var background = $(this.Selectors.backgroundMap)
        background.css('animation', 'perspective '+duration+'ms forwards')
    },
    startBulletAnimation: function () {
        var width = this.Selectors.width
        var unitWidth = 100 / width
        var unitHalfWidth = 50 / width

        var left = "calc("+ ((width/2) * (unitWidth) + (unitHalfWidth / 2)) +"% - 30px)"
        var top = "calc("+ ((width/2) * (unitWidth * 1.375) + unitWidth) +"% - 30px)"
        var height

        var model = $("<span class=\"main-bullet\" id=\"main-bullet\"></span>")
        model.css('left', left)
        model.css('top', top)

        var modelLine = $("<span class=\"main-line-width\"></span>")
        left = "calc("+ ((width/2) * (unitWidth) + (unitHalfWidth / 2)) +"% - 1px)"
        top = "calc("+ ((width/2) * (unitWidth * 1.375) + (unitHalfWidth / 2.53)) +"%)"
        height = "calc("+ (unitHalfWidth * 1.6 * 3) +"%)"
        modelLine.css('left', left)
        modelLine.css('top', top)
        modelLine.css('height', height)
        modelLine.css('transform-origin', 'bottom')
        modelLine.css('animation', 'height '+200+'ms linear forwards')
        //$(this.Selectors.backgroundMap).append(model)
        $(this.Selectors.backgroundMap).append(modelLine)
    }
}

var servicesAnimation = {
    Selectors: {
        canvas: '#services-canvas',
        perspectiveContainer: '#services-canvas',

    },
    Variables: {
        map: [],
        width: 21, // Impair value required
        unitWidth: 0,
        bulletWidth: 0,
    },
    init: function() {
        var that = this
        var canvas = $(that.Selectors.canvas)
        var perspectiveContainer = $(that.Selectors.canvas)

        that.Variables.map = this.getMapping()
        that.Variables.unitWidth = (100 / that.Variables.width)
        that.Variables.bulletWidth = that.Variables.unitWidth / 2

        this.loadAllBullet()
        this.startConnectionsAnimation()
    },
    loadAllBullet: function() {
        var modelBullet
        var perspectiveContainer = $(this.Selectors.canvas)

        for(var x = 0; x < this.Variables.width; x++) {
            for(var y = 0; y < this.Variables.width; y++) {
                modelBullet = $("<span class='bullet' id='bullet_"+x+"_"+y+"'></span>")
                modelBullet.css('width', this.Variables.bulletWidth+'%')
                modelBullet.css('height', this.Variables.bulletWidth+'%')
                modelBullet.css('top', 'calc('+(this.Variables.unitWidth * x)+'% + '+(this.Variables.bulletWidth/2)+'%)')
                modelBullet.css('left', 'calc('+(this.Variables.unitWidth * y)+'% + '+(this.Variables.bulletWidth/2)+'%)')
                perspectiveContainer.append(modelBullet)
            }
        }
    },
    startConnectionsAnimation: function() {
        var perspectiveContainer = $(this.Selectors.canvas)

        var x = (this.Variables.width - 1) / 2
        var y = (this.Variables.width - 1) / 2

        perspectiveContainer.find('#bullet_'+x+'_'+y).addClass('active')
        this.Variables.map[x][y]["done"]=1

        var delayGap = 1000
        var delay = 0

        for(var i = x; i < this.Variables.width; i++) {
            this.activeSideBullets(i, y, delay)
            delay += delayGap
        }
        delay = 0
        for(var i = y; i < this.Variables.width; i++) {
            this.activeSideBullets(x, i, delay)
            delay += delayGap
        }

        delay = 0
        for(var i = x; i >= 0; i--) {
            this.activeSideBullets(i, y, delay)

            delay += delayGap
        }
        delay = 0
        for(var i = y; i >= 0; i--) {
            this.activeSideBullets(x, i, delay)
            delay += delayGap
        }

    },
    getMapping: function() {
        var mapping = []
        for(let i = 0; i < this.Variables.width; i++) {
            mapping[i] = []
            for(let j = 0; j < this.Variables.width; j++) {
                mapping[i][j] = []
                mapping[i][j]["value"] = 0
                mapping[i][j]["done"] = 0
                mapping[i][j]["x"] = i
                mapping[i][j]["y"] = j
            }
        }
        return mapping
    },
    activeSideBullets: function(x, y, delay, delayTotal = 0) {
        var perspectiveContainer = $(this.Selectors.canvas)
        var that = this
        var updatePoints = []
        delayTotal = delayTotal + delay

        if (x - 1 >= 0 && this.Variables.map[x - 1][y]["done"] !== 1) {
            this.Variables.map[x - 1][y]["done"] = 1
            updatePoints.push({"x": x - 1, "y": y})
            setTimeout(function() {
                perspectiveContainer.find('#bullet_' + (x - 1) + '_' + y).addClass('active')
            }, delayTotal)
        }
        if (y + 1 < this.Variables.width && this.Variables.map[x][y + 1]["done"] !== 1) {
            this.Variables.map[x][y + 1]["done"]=1
            updatePoints.push({"x": x, "y": y + 1})
            setTimeout(function() {
                perspectiveContainer.find('#bullet_'+x+'_'+(y + 1)).addClass('active')
            }, delayTotal)
        }
        if (x + 1 < this.Variables.width && this.Variables.map[x + 1][y]["done"] !== 1) {
            this.Variables.map[x + 1][y]["done"]=1
            updatePoints.push({"x": x + 1, "y": y})
            setTimeout(function() {
                perspectiveContainer.find('#bullet_'+(x + 1)+'_'+y).addClass('active')
            }, delayTotal)
        }
        if (y - 1 >= 0 && this.Variables.map[x][y - 1]["done"] !== 1) {
            this.Variables.map[x][y - 1]["done"]=1
            updatePoints.push({"x": x , "y": y - 1})
            setTimeout(function() {
                perspectiveContainer.find('#bullet_'+x+'_'+(y - 1)).addClass('active')
            }, delayTotal)
        }

        return updatePoints
    }
}
